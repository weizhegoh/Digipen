
====================== Test1 - random insert ======================
BSTree
height: 5
 nodes: 10
tree is NOT empty

            2[10]     

  0[2]                                    8[7]      

       1[1]      3[5]                          9[1]      

                           5[4]      

                      4[1]      6[2]      

                                     7[1]      


====================== Test2 - sorted insert ======================
BSTree
height: 9
 nodes: 10
tree is NOT empty

    0[10]     

         1[9]      

              2[8]      

                   3[7]      

                        4[6]      

                             5[5]      

                                  6[4]      

                                       7[3]      

                                            8[2]      

                                                 9[1]      


====================== Test3 - random insert/remove ======================
BSTree
remove 2, 6, 3:
height: 3
 nodes: 7
tree is NOT empty

      1[7]      

 0[1]                     8[5]      

                5[3]           9[1]      

           4[1]      7[1]      


====================== Test4 - random insert/remove all ======================
BSTree
remove all and then some:
height: -1
 nodes: 0
tree is empty


====================== Test5 - random insert/clear ======================
BSTree
clear:
height: -1
 nodes: 0
tree is empty


====================== Test6 - random insert/find ======================
BSTree
            2[10]     

  0[2]                                    8[7]      

       1[1]      3[5]                          9[1]      

                           5[4]      

                      4[1]      6[2]      

                                     7[1]      

Value 1 found with 3 compares
Value 3 found with 3 compares
Value 5 found with 4 compares
Value 50 NOT found with 4 compares

====================== Test1 - random insert ======================
AVLTree
height: 3
 nodes: 10
tree is NOT empty

                          5[10]     

           2[5]                          8[4]      

 0[2]           3[2]           6[2]           9[1]      

      1[1]           4[1]           7[1]      


====================== Test2 - sorted insert ======================
AVLTree
height: 3
 nodes: 10
tree is NOT empty

                3[10]     

      1[3]                          7[6]      

 0[1]      2[1]           5[3]           8[2]      

                     4[1]      6[1]           9[1]      


====================== Test3 - random insert/remove ======================
AVLTree
remove 2, 6, 3:
height: 2
 nodes: 7
tree is NOT empty

                5[7]      

      1[3]                8[3]      

 0[1]      4[1]      7[1]      9[1]      


====================== Test4 - random insert/remove all ======================
AVLTree
remove all and then some:
height: -1
 nodes: 0
tree is empty


====================== Test5 - random insert/clear ======================
AVLTree
clear:
height: -1
 nodes: 0
tree is empty


====================== Test6 - random insert/find ======================
AVLTree
                          5[10]     

           2[5]                          8[4]      

 0[2]           3[2]           6[2]           9[1]      

      1[1]           4[1]           7[1]      

Value 1 found with 4 compares
Value 3 found with 3 compares
Value 5 found with 1 compares
Value 50 NOT found with 4 compares

====================== Test7 - assignment ======================
BSTree
height: 5
 nodes: 10
            2[10]     

  0[2]                                    8[7]      

       1[1]      3[5]                          9[1]      

                           5[4]      

                      4[1]      6[2]      

                                     7[1]      

height: 5
 nodes: 10
            6[10]     

  0[2]                                    24[7]     

       3[1]      9[5]                          27[1]     

                           15[4]     

                      12[1]     18[2]     

                                     21[1]     

tree 1 ------------------------------------------
            6[10]     

  0[2]                                    24[7]     

       3[1]      9[5]                          27[1]     

                           15[4]     

                      12[1]     18[2]     

                                     21[1]     

tree 2------------------------------------------
            6[10]     

  0[2]                                    24[7]     

       3[1]      9[5]                          27[1]     

                           15[4]     

                      12[1]     18[2]     

                                     21[1]     


====================== Test8 - copy constructor ======================
BSTree
height: 5
 nodes: 10
            2[10]     

  0[2]                                    8[7]      

       1[1]      3[5]                          9[1]      

                           5[4]      

                      4[1]      6[2]      

                                     7[1]      

height: 5
 nodes: 10
tree 1------------------------------------------
            2[10]     

  0[2]                                    8[7]      

       1[1]      3[5]                          9[1]      

                           5[4]      

                      4[1]      6[2]      

                                     7[1]      

tree 2------------------------------------------
            2[10]     

  0[2]                                    8[7]      

       1[1]      3[5]                          9[1]      

                           5[4]      

                      4[1]      6[2]      

                                     7[1]      


====================== Test7 - assignment ======================
AVLTree
height: 3
 nodes: 10
                          5[10]     

           2[5]                          8[4]      

 0[2]           3[2]           6[2]           9[1]      

      1[1]           4[1]           7[1]      

height: 3
 nodes: 10
                          15[10]    

           6[5]                          24[4]     

 0[2]           9[2]           18[2]          27[1]     

      3[1]           12[1]          21[1]     

tree 1 ------------------------------------------
                          15[10]    

           6[5]                          24[4]     

 0[2]           9[2]           18[2]          27[1]     

      3[1]           12[1]          21[1]     

tree 2------------------------------------------
                          15[10]    

           6[5]                          24[4]     

 0[2]           9[2]           18[2]          27[1]     

      3[1]           12[1]          21[1]     


====================== Test8 - copy constructor ======================
AVLTree
height: 3
 nodes: 10
                          5[10]     

           2[5]                          8[4]      

 0[2]           3[2]           6[2]           9[1]      

      1[1]           4[1]           7[1]      

height: 3
 nodes: 10
tree 1------------------------------------------
                          5[10]     

           2[5]                          8[4]      

 0[2]           3[2]           6[2]           9[1]      

      1[1]           4[1]           7[1]      

tree 2------------------------------------------
                          5[10]     

           2[5]                          8[4]      

 0[2]           3[2]           6[2]           9[1]      

      1[1]           4[1]           7[1]      


====================== TestIndex - random insert/subscript ======================
BSTree
height: 6
 nodes: 8
tree is NOT empty

   A[8]      

                                      S[7]      

             E[6]      

        C[1]                     R[4]      

                  H[3]      

                       I[2]      

                            N[1]      

Index 0: A
Index 1: C
Index 2: E
Index 3: H
Index 4: I
Index 5: N
Index 6: R
Index 7: S

====================== TestIndex - random insert/subscript ======================
AVLTree
height: 3
 nodes: 8
tree is NOT empty

           E[8]      

 A[2]                          R[5]      

      C[1]           I[3]           S[1]      

                H[1]      N[1]      

Index 0: A
Index 1: C
Index 2: E
Index 3: H
Index 4: I
Index 5: N
Index 6: R
Index 7: S

====================== TestStrings ======================
type: BSTree, height: 6, nodes: 21
             abe[21]   

        abd[2]                                                 for[18]   

   abc[1]                                       fad[9]                        one[8]    

                  box[6]                             fat[2]         hit[2]                        two[5]    

                                 car[5]                   fav[1]         man[1]    six[3]              zoo[1]    

                            cab[2]         dog[2]                                            sox[2]    

                       boy[1]         dig[1]                                            sow[1]    

Value dig found with 7 compares
Value abe found with 1 compares
Value hot NOT found with 6 compares
Value abcd NOT found with 4 compares
Index 0: abc
Index 1: abd
Index 2: abe
Index 3: box
Index 4: boy
Index 5: cab
Index 6: car
Index 7: dig
Index 8: dog
Index 9: fad
Index 10: fat
Index 11: fav
Index 12: for
Index 13: hit
Index 14: man
Index 15: one
Index 16: six
Index 17: sow
Index 18: sox
Index 19: two
Index 20: zoo

====================== TestStrings ======================
type: AVLTree, height: 4, nodes: 21
                                               fad[21]   

                                car[9]                                       one[11]   

                 box[6]                   dog[2]         fav[5]                                  two[5]    

       abd[3]              cab[2]    dig[1]         fat[1]         hit[3]              sow[3]         zoo[1]    

  abc[1]    abe[1]    boy[1]                                  for[1]    man[1]    six[1]    sox[1]    

Value dig found with 4 compares
Value abe found with 5 compares
Value hot NOT found with 6 compares
Value abcd NOT found with 6 compares
Index 0: abc
Index 1: abd
Index 2: abe
Index 3: box
Index 4: boy
Index 5: cab
Index 6: car
Index 7: dig
Index 8: dog
Index 9: fad
Index 10: fat
Index 11: fav
Index 12: for
Index 13: hit
Index 14: man
Index 15: one
Index 16: six
Index 17: sow
Index 18: sox
Index 19: two
Index 20: zoo

====================== AVLStress ======================
Sum is 900565408
type: AVLTree, height: 15, nodes: 10000
type: AVLTree, height: 3, nodes: 10
                          5192[10]  

                4321[5]             6917[4]   

      1111[3]        4650[1]   6628[1]   7009[2]   

 674[1]    4310[1]                            9235[1]   

Index 0: 674
Index 1: 1111
Index 2: 4310
Index 3: 4321
Index 4: 4650
Index 5: 5192
Index 6: 6628
Index 7: 6917
Index 8: 7009
Index 9: 9235
