-----------------------
Create New Component
-----------------------
Create Component file in BaseEngine/ECSEngine/Component filter.

@ HeaderFiles/ComponentHeader.h 
	#include your Component files

@ BaseEngine/EngineCore/EntityHelperFunction/EntityRegister.h  
	@ RegisterECSGameComponents()
		- put in ecsEngine.RegisterComponent<[Your Component]>();
	 
@ BaseEngine/EngineCore/EntityHelperFunction/EntityCreation.h (optional for varadic template)

-----------------------
Create New ManagerClass
-----------------------
@ HeaderFiles/ManagerClassHeader.h
	#include your Component files
	
if you want your data access outside of your current game state
{
	@ main.cpp
		- gFakeEngine->RegisterGraphicManager<[Your Class]>();

}
else
{
	@current gamestate file. [e.g. Level_1.cpp]
		- gFakeEngine->RegisterGameManager<[Your Class]>();
	
	@ free function remeber to clear your data.
		- clear(gFakeEngine->GetGameManager<[Your Class]>());
}

Getter fuction usage:
	- gFakeEngine->GetGameManager<[Your Class]>();
	- gFakeEngine->GetGraphicManager<[Your Class]>();